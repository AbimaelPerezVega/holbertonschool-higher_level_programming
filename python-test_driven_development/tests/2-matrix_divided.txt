============================
How to Use 2-matrix_divided.py
============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix with all elements divided by the divisor.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Each row of the matrix must be of the same size.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5]
    ... ]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

The function works with floating-point values and rounds the result to 2 decimal places.

::

    >>> matrix = [
    ...     [1.2, 2.5, 3.7],
    ...     [4.1, 5.9, 6.3]
    ... ]
    >>> matrix_divided(matrix, 2)
    [[0.6, 1.25, 1.85], [2.05, 2.95, 3.15]]

Non-Numbers
===========

``matrix_divided()`` expects that the matrix is a list of lists of integers or floats.
If any element is not an integer or float, a TypeError is raised:

::

    >>> matrix = [
    ...     [1, 2, "3"],
    ...     [4, 5, 6]
    ... ]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The divisor must be a number (integer or float).

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> matrix_divided(matrix, "3")
    Traceback (most recent call last):
    TypeError: div must be a number

The function will fail if the divisor is zero.

::

    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
